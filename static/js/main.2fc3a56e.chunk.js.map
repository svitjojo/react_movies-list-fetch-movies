{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api.ts","utils/getNormalizeMovie.ts","types/ErrorMessage.ts","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","React","memo","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","API_URL","getMovie","query","a","fetch","response","json","ErrorMessage","getNormalizeMovie","Title","Plot","Poster","imdbID","FindMovie","addMovie","errorMessage","changeErrorMessage","useState","setQuery","setMovie","isLoading","setIsLoading","handleSearch","event","preventDefault","movieFromServer","NOMOVIE","reset","useCallback","handleAdd","handleInput","target","value","NONE","onSubmit","htmlFor","type","id","placeholder","onChange","cn","disabled","onClick","App","setMovies","setErrorMessage","message","some","m","HASMOVIE","currentMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2fc3a56e.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = React.memo(({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n));\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ResponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=8bd12c59';\n\n// eslint-disable-next-line max-len\nexport async function getMovie(query: string): Promise<MovieData | ResponseError> {\n  const response = await fetch(`${API_URL}&t=${query}`);\n\n  return response.json();\n}\n","import { Movie } from '../types/Movie';\nimport { MovieData } from '../types/MovieData';\n\n// eslint-disable-next-line max-len\nconst defaultImgUrl = 'https://via.placeholder.com/360x270.png?text=no%20preview';\n\nexport const getNormalizeMovie = ({\n  Title,\n  Plot,\n  Poster,\n  imdbID,\n}: MovieData): Movie => ({\n  title: Title,\n  description: Plot,\n  imgUrl: Poster === 'N/A' ? defaultImgUrl : Poster,\n  imdbId: imdbID,\n  imdbUrl: `https://www.imdb.com/title/${imdbID}`,\n});\n","export enum ErrorMessage {\n  NONE = '',\n  NOMOVIE = 'Can\\'t find a movie with such a title',\n  HASMOVIE = 'Movie already in the list',\n}\n","import React, { useCallback, useState } from 'react';\nimport cn from 'classnames';\nimport './FindMovie.scss';\nimport { getMovie } from '../../api';\nimport { Movie } from '../../types/Movie';\nimport { MovieCard } from '../MovieCard';\nimport { getNormalizeMovie } from '../../utils/getNormalizeMovie';\nimport { ErrorMessage } from '../../types/ErrorMessage';\n\ntype Props = {\n  addMovie: (movie: Movie) => void,\n  errorMessage: ErrorMessage,\n  changeErrorMessage: (message: ErrorMessage) => void,\n};\n\nexport const FindMovie: React.FC<Props> = ({\n  addMovie,\n  errorMessage,\n  changeErrorMessage,\n}) => {\n  const [query, setQuery] = useState('');\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSearch = async (event: React.FormEvent) => {\n    event.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const movieFromServer = await getMovie(query);\n\n      if ('Error' in movieFromServer) {\n        setIsLoading(false);\n        changeErrorMessage(ErrorMessage.NOMOVIE);\n\n        return;\n      }\n\n      setMovie(getNormalizeMovie(movieFromServer));\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const reset = useCallback(() => {\n    setMovie(null);\n    setQuery('');\n  }, []);\n\n  const handleAdd = useCallback(() => {\n    if (movie) {\n      addMovie(movie);\n      reset();\n    }\n  }, [movie]);\n\n  const handleInput = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      setQuery(event.target.value);\n      changeErrorMessage(ErrorMessage.NONE);\n    }, [],\n  );\n\n  return (\n    <>\n      <form className=\"find-movie\" onSubmit={handleSearch}>\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={query}\n              onChange={handleInput}\n            />\n          </div>\n\n          {errorMessage && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              {errorMessage}\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={cn('button is-light', {\n                'is-loading': isLoading,\n              })}\n              disabled={!query}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          {movie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={handleAdd}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { useCallback, useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\nimport { ErrorMessage } from './types/ErrorMessage';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n  const [\n    errorMessage, setErrorMessage,\n  ] = useState<ErrorMessage>(ErrorMessage.NONE);\n\n  const changeErrorMessage = useCallback(\n    (message: ErrorMessage) => setErrorMessage(message), [],\n  );\n\n  const addMovie = useCallback((movie: Movie) => {\n    const hasMovie = movies.some(m => m.imdbId === movie.imdbId);\n\n    if (!hasMovie) {\n      setMovies((currentMovies) => [...currentMovies, movie]);\n    } else {\n      setErrorMessage(ErrorMessage.HASMOVIE);\n    }\n  }, [movies]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie\n          addMovie={addMovie}\n          errorMessage={errorMessage}\n          changeErrorMessage={changeErrorMessage}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}