{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api.ts","utils/getNormalizeMovie.ts","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","React","memo","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","getMovie","query","fetch","then","res","json","catch","Response","Error","getNormalizeMovie","Title","Plot","Poster","imdbID","FindMovie","addMovie","useState","setQuery","setMovie","hasError","setHasError","isLoading","setIsLoading","handleSearch","event","a","preventDefault","movieFromServer","reset","useCallback","handleAdd","handleInput","target","value","onSubmit","htmlFor","type","id","placeholder","onChange","cn","disabled","onClick","App","setMovies","some","m","currentMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f3cebe5d.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = React.memo(({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n));\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ResponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=8bd12c59';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { Movie } from '../types/Movie';\nimport { MovieData } from '../types/MovieData';\n\n// eslint-disable-next-line max-len\nconst defaultImgUrl = 'https://via.placeholder.com/360x270.png?text=no%20preview';\n\nexport const getNormalizeMovie = ({\n  Title,\n  Plot,\n  Poster,\n  imdbID,\n}: MovieData): Movie => ({\n  title: Title,\n  description: Plot,\n  imgUrl: Poster === 'N/A' ? defaultImgUrl : Poster,\n  imdbId: imdbID,\n  imdbUrl: `https://www.imdb.com/title/${imdbID}`,\n});\n","import React, { useCallback, useState } from 'react';\nimport cn from 'classnames';\nimport './FindMovie.scss';\nimport { getMovie } from '../../api';\nimport { Movie } from '../../types/Movie';\nimport { MovieCard } from '../MovieCard';\nimport { getNormalizeMovie } from '../../utils/getNormalizeMovie';\n\ntype Props = {\n  addMovie: (movie: Movie) => void\n};\n\nexport const FindMovie: React.FC<Props> = ({ addMovie }) => {\n  const [query, setQuery] = useState('');\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [hasError, setHasError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSearch = async (event: React.FormEvent) => {\n    event.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const movieFromServer = await getMovie(query);\n\n      if ('Error' in movieFromServer) {\n        setHasError(true);\n        setIsLoading(false);\n\n        return;\n      }\n\n      setMovie(getNormalizeMovie(movieFromServer));\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const reset = useCallback(() => {\n    setMovie(null);\n    setQuery('');\n  }, []);\n\n  const handleAdd = useCallback(() => {\n    if (movie) {\n      addMovie(movie);\n      reset();\n    }\n  }, [movie]);\n\n  const handleInput = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      setQuery(event.target.value);\n      setHasError(false);\n    }, [],\n  );\n\n  return (\n    <>\n      <form className=\"find-movie\" onSubmit={handleSearch}>\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={query}\n              onChange={handleInput}\n            />\n          </div>\n\n          {hasError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={cn('button is-light', {\n                'is-loading': isLoading,\n              })}\n              disabled={!query}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          {movie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={handleAdd}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { useCallback, useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const addMovie = useCallback((movie: Movie) => {\n    const hasMovie = movies.some(m => m.imdbId === movie.imdbId);\n\n    if (!hasMovie) {\n      setMovies((currentMovies) => [...currentMovies, movie]);\n    }\n  }, [movies]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie addMovie={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}